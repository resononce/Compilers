/* Generated By:JavaCC: Do not edit this line. Parser.java */
  package parser;

  import ast.*;
  import util.ErrorHandler;
  import java.util.Stack;
  import java.util.Iterator;

  /** A class for performing syntactic analysis
   * */
  public class Parser implements ParserConstants {
      /** Maximum string size allowed */
      public static final int MAX_STRING_SIZE = 5000;
      /** Is debugging enabled? */
      private static boolean debug = false;
      /** Filenames of source files */
      private static String[] filenames = null;
      /** Input streams of source files */
      private static java.io.FileInputStream[] fileReaders = null;
      /** Current file number (index into filenames and fileReaders) */
      private static int fileCnt = 0;

      public Parser(String[] filenames, boolean debug) {
          // set debugging flag
          this.debug = debug;

          // initialize filenames field to parameter filenames
          // used later for finding the name of the current file
          this.filenames = filenames;

          // check that there is at least one specified filename
          if (filenames.length == 0)
              throw new RuntimeException(
                     "Must specify at least one filename to scan");
          // must initialize readers for each file (FileInputStream)
          fileReaders = new java.io.FileInputStream[filenames.length];
          for (int i = 0; i < filenames.length; i++) {
              // try...catch checks if file is found
              try {
                  // create the ith file reader
                  fileReaders[i] = new java.io.FileInputStream(filenames[i]);
              }
              catch(java.io.FileNotFoundException e) {
                  // if file not found then report an error and exit
                  System.err.println("Error: file '" +
                                     filenames[i] + "' not found");
                  System.exit(1);
              }
          }

          if (jj_initialized_once) {
              System.out.println(
              "ERROR: Second call to constructor of static parser.  You must" +
              "       either use ReInit() or set the JavaCC option STATIC to " +
              "false       during parser generation.");
              throw new Error();
          }
          jj_initialized_once = true;

          try { jj_input_stream =
                      new JavaCharStream(fileReaders[0], null, 1, 1); }
          catch(java.io.UnsupportedEncodingException e) {
              throw new RuntimeException(e);
          }

          ReInit(fileReaders[0]);
      }

      /** Parse the program
        * @return parsed program as an AST (abstract syntax tree)
        * */
      public Program parse() {
          // initialize the error handler and class list
          ErrorHandler errorHandler = new ErrorHandler();
          ClassList classList = new ClassList(0);

          // loop over the files
          for (fileCnt = 0; fileCnt < fileReaders.length; fileCnt++) {
              try {
                  if (fileCnt > 0)
                        jj_input_stream.ReInit(fileReaders[fileCnt], 1, 1);
                  Program p = Parser.Program();

                  for (Iterator iter = p.getClassList().getIterator();
                       iter.hasNext();
                      )
                     classList.addElement((Class_)iter.next());
              }
              catch(ParseException e) {
                  String message = e.toString();
                  int index = message.indexOf(": ");
                  message = message.substring(index+2,message.length());
                  errorHandler.register(
                       errorHandler.PARSE_ERROR, filenames[fileCnt],
                       JavaCharStream.getBeginLine(), message);
              }
          }

          errorHandler.checkErrors();

          return new Program(0, classList);
      }

      /** Get the filename of the file currently being scanned */
      public static String getCurrFilename() {
          return filenames[fileCnt];
      }

/******************************************/
/* Add your grammar rules with annotations
   below ...                              */
/******************************************/

/* 

Precedence (from highest to lowest)
10  new  ()
9   . (dispatch) [] ++ -- (postfix)[left]
8   - (unary) !     ++ -- (prefix) [right]
7   (casting)                      [right]
6   * / %                          [left]
5   + -                            [left]
4   < <= > >= instanceof           [left]
3   == !=                          [left]
2   &&                             [left]
1   ||                             [left]
0   =                              [right]

*/
  static final public Program Program() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  ClassList cl = new ClassList(lineNum);
  Class_ c;
    label_1:
    while (true) {
      c = Class();
      cl.addElement(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
     {if (true) return new Program(lineNum, cl);}
    throw new Error("Missing return statement in function");
  }

  static final public Class_ Class() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  Token cName, pName = null;
  MemberList ml = new MemberList(lineNum);
  Member m;
  String parent;
    jj_consume_token(CLASS);
      lineNum = JavaCharStream.getBeginLine();
    cName = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      pName = jj_consume_token(ID);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LEFTBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      m = Member();
                       ml.addElement(m);
    }
    jj_consume_token(RIGHTBRACE);
        parent = (pName == null) ? "Object" : pName.toString();
        {if (true) return new Class_(lineNum,
                          getCurrFilename(),
                          cName.toString(),
                          parent,
                          ml);}
    throw new Error("Missing return statement in function");
  }

  static final public Member Member() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  Token type, name;
  Method m = null;
  Field f = null;
  String lb = "";
    type = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
                                      lb = "[]";
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      m = Method(type, name, lb);
      break;
    case ASSIGN:
    case SEMICOLON:
      f = Field(type, name, lb);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return (m == null) ? f : m;}
    throw new Error("Missing return statement in function");
  }

  static final public Method Method(Token type, Token name, String lb) throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  FormalList fl = new FormalList(lineNum);
  StmtList sl = new StmtList(lineNum);
  Formal f; Stmt stmt;
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      f = Formal();
                    fl.addElement(f);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        f = Formal();
                              fl.addElement(f);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(LEFTBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case FOR:
      case WHILE:
      case IF:
      case RETURN:
      case BREAK:
      case INCREMENT:
      case DECREMENT:
      case NOT:
      case LEFTBRACE:
      case LEFTPAREN:
      case MINUS:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      stmt = Stmt();
                     sl.addElement(stmt);
    }
    jj_consume_token(RIGHTBRACE);
      {if (true) return new Method(lineNum,
                        type.toString() + lb,
                        name.toString(),
                        fl,
                        sl);}
    throw new Error("Missing return statement in function");
  }

  static final public Field Field(Token type, Token name, String lb) throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  Expr e = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      e = Expr();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
      {if (true) return new Field(lineNum,
                       type.toString() + lb,
                       name.toString(),
                       e);}
    throw new Error("Missing return statement in function");
  }

  static final public Formal Formal() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  Token type, name;
  String lb = "";
    type = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
                                     lb = "[]";
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
      {if (true) return new Formal(lineNum,
                        type.toString() + lb,
                        name.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public Stmt Stmt() throws ParseException {
  Stmt stmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case LEFTPAREN:
    case MINUS:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      if (jj_2_1(3)) {
        stmt = ExprStmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          stmt = DeclStmt();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case IF:
      stmt = IfStmt();
      break;
    case WHILE:
      stmt = WhileStmt();
      break;
    case FOR:
      stmt = ForStmt();
      break;
    case BREAK:
      stmt = BreakStmt();
      break;
    case RETURN:
      stmt = ReturnStmt();
      break;
    case LEFTBRACE:
      stmt = BlockStmt();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ExprStmt ExprStmt() throws ParseException {
  Expr e;
  int lineNum = JavaCharStream.getBeginLine();
    e = Expr();
    jj_consume_token(SEMICOLON);
      {if (true) return new ExprStmt(lineNum, e);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclStmt DeclStmt() throws ParseException {
  Expr e;
  Token type, name;
  Token lb = null;
  String typeStr = "";
  int lineNum = JavaCharStream.getBeginLine();
    type = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      lb = jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
                                          typeStr = "[]";
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    e = Expr();
    jj_consume_token(SEMICOLON);
      {if (true) return new DeclStmt(lineNum,
                          type.toString() + typeStr,
                          name.toString(),
                          e);}
    throw new Error("Missing return statement in function");
  }

  static final public IfStmt IfStmt() throws ParseException {
  Expr e;
  Stmt then;
  IfStmt r;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(IF);
    jj_consume_token(LEFTPAREN);
    e = Expr();
    jj_consume_token(RIGHTPAREN);
    then = Stmt();
    r = OptionalElse(e, then, lineNum);
      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStmt OptionalElse(Expr predExpr, Stmt then, int lineNum) throws ParseException {
  Stmt elseStmt = null;
  BlockStmt bs = new BlockStmt(lineNum, new StmtList(lineNum));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseStmt = Stmt();
      {if (true) return new IfStmt(lineNum,
                        predExpr,
                        then,
                        elseStmt);}
      break;
    default:
      jj_la1[13] = jj_gen;
      {if (true) return new IfStmt(lineNum,
                        predExpr,
                        then,
                        bs);}
    }
    throw new Error("Missing return statement in function");
  }

  static final public WhileStmt WhileStmt() throws ParseException {
  Expr e;
  Stmt body;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(WHILE);
    jj_consume_token(LEFTPAREN);
    e = Expr();
    jj_consume_token(RIGHTPAREN);
    body = Stmt();
      {if (true) return new WhileStmt(lineNum, e, body);}
    throw new Error("Missing return statement in function");
  }

  static final public ForStmt ForStmt() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  Expr init = null;
  Expr pred = null;
  Expr update = null;
  Stmt body;
    jj_consume_token(FOR);
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case LEFTPAREN:
    case MINUS:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      init = Expr();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case LEFTPAREN:
    case MINUS:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      pred = Expr();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case LEFTPAREN:
    case MINUS:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      update = Expr();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTPAREN);
    body = Stmt();
      {if (true) return new ForStmt(lineNum,
                         init,
                         pred,
                         update,
                         body);}
    throw new Error("Missing return statement in function");
  }

  static final public BreakStmt BreakStmt() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
      {if (true) return new BreakStmt(lineNum);}
    throw new Error("Missing return statement in function");
  }

  static final public ReturnStmt ReturnStmt() throws ParseException {
  Expr e = null;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case LEFTPAREN:
    case MINUS:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      e = Expr();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
      {if (true) return new ReturnStmt(lineNum, e);}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStmt BlockStmt() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine();
  StmtList sl = new StmtList(lineNum);
  Stmt s = null;
    jj_consume_token(LEFTBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case FOR:
      case WHILE:
      case IF:
      case RETURN:
      case BREAK:
      case INCREMENT:
      case DECREMENT:
      case NOT:
      case LEFTBRACE:
      case LEFTPAREN:
      case MINUS:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      s = Stmt();
                   sl.addElement(s);
    }
    jj_consume_token(RIGHTBRACE);
      {if (true) return new BlockStmt(lineNum, sl);}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr() throws ParseException {
  Expr e;
    e = AssignExpr();
                       {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr AssignExpr() throws ParseException {
  Expr e1 = null;
  Expr e2 = null;
  Expr e3 = null;
  Token assign = null;
  VarExpr v1 = null;
  VarExpr v2 = null;
  String refName = null;
  DispatchExpr d1 = null;
  ArrayExpr a1 = null;
  ArrayExpr a2 = null;
  Expr r = null; int lineNum = JavaCharStream.getBeginLine();
    e1 = BinaryOr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      assign = jj_consume_token(ASSIGN);
      e2 = Expr();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
        if (assign == null) {
          {if (true) return e1;}
        }else if (e1 instanceof VarExpr) {
          v1 = (VarExpr) e1;
          e3 = v1.getRef();

          if (e3 == null) {
            r = new AssignExpr(lineNum,
                               refName,
                               v1.getName(),
                               e2);
          } else if (e3 instanceof VarExpr) {
            v2 = (VarExpr) e3;
            refName = v2.getName();
            r = new AssignExpr(lineNum,
                               refName,
                               v1.getName(),
                               e2);
          } else if (e3 instanceof DispatchExpr) {
            d1 = (DispatchExpr) e3;
            refName = d1.getMethodName();
            r = new AssignExpr(lineNum,
                               refName,
                               v1.getName(),
                               e2);
          } else if (e3 instanceof ArrayExpr) {
            a1 = (ArrayExpr) e3;
            refName = a1.getName();
            r = new AssignExpr(lineNum,
                               refName,
                               v1.getName(),
                               e2);
          }
        }else if (e1 instanceof ArrayExpr) {
          a1 = (ArrayExpr) e1;
          e3 = a1.getRef();

          if (e3 == null) {
            r = new ArrayAssignExpr(lineNum,
                                    null,
                                    a1.getName(), a1.getIndex(),
                                    e2);
          }else if (e3 instanceof ArrayExpr) {
            a2 = (ArrayExpr) e3;
            r = new ArrayAssignExpr(lineNum,
                                    a2.getName(),
                                    a1.getName(),
                                    a1.getIndex(),
                                    e2);
          }else if (e3 instanceof DispatchExpr) {
            d1 = (DispatchExpr) e3;
            r = new ArrayAssignExpr(lineNum,
                                    d1.getMethodName(),
                                    a1.getName(),
                                    a1.getIndex() , e2);
          }else if (e3 instanceof VarExpr) {
            v2 = (VarExpr) e3;
            r = new ArrayAssignExpr(lineNum,
                                    v2.getName(),
                                    a1.getName(),
                                    a1.getIndex(),
                                    e2);
          }
        }
        {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr BinaryOr() throws ParseException {
  Expr e1;
  Expr e2 = null;
  Token orOp = null;
  int lineNum = JavaCharStream.getBeginLine();
    e1 = BinaryAnd();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      label_6:
      while (true) {
        orOp = jj_consume_token(OR);
                      lineNum = JavaCharStream.getBeginLine();
        e2 = BinaryAnd();
          if (orOp.toString() == "||") {
            e1 = new BinaryLogicOrExpr(lineNum, e1, e2);
          }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr BinaryAnd() throws ParseException {
  Expr e1;
  Expr e2 = null;
  Token andOp = null;
  int lineNum = JavaCharStream.getBeginLine();
    e1 = BinaryEquals();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      label_7:
      while (true) {
        andOp = jj_consume_token(AND);
        lineNum = JavaCharStream.getBeginLine();
        e2 = BinaryEquals();
        if (andOp.toString() == "&&") {
          e1 = new BinaryLogicAndExpr(lineNum, e1, e2);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr BinaryEquals() throws ParseException {
  Expr e1;
  Expr e2 = null;
  Token eqOp = null;
  int lineNum = JavaCharStream.getBeginLine();
    e1 = BinaryCompare();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
    case NOTEQUAL:
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          eqOp = jj_consume_token(EQUALS);
                            lineNum = JavaCharStream.getBeginLine();
          break;
        case NOTEQUAL:
          eqOp = jj_consume_token(NOTEQUAL);
                                lineNum = JavaCharStream.getBeginLine();
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = BinaryCompare();
          if (eqOp.toString() == "==") {
            e1 = new BinaryCompEqExpr(lineNum, e1, e2);
          }
          else if (eqOp.toString() == "!=") {
            e1 = new BinaryCompNeExpr(lineNum, e1, e2);
          }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
        case NOTEQUAL:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_8;
        }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr BinaryCompare() throws ParseException {
  Expr e1;
  Expr e2 = null;
  String typeStr = null;
  Token compOp = null;
  int lineNum = JavaCharStream.getBeginLine();
    e1 = BinaryPlusMinus();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
    case LESSTHANOREQUALTO:
    case GREATERTHANOREQUALTO:
    case LESSTHAN:
    case GREATERTHAN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHANOREQUALTO:
      case GREATERTHANOREQUALTO:
      case LESSTHAN:
      case GREATERTHAN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATERTHAN:
          compOp = jj_consume_token(GREATERTHAN);
                                  lineNum = JavaCharStream.getBeginLine();
          break;
        case LESSTHAN:
          compOp = jj_consume_token(LESSTHAN);
                                  lineNum = JavaCharStream.getBeginLine();
          break;
        case GREATERTHANOREQUALTO:
          compOp = jj_consume_token(GREATERTHANOREQUALTO);
              lineNum = JavaCharStream.getBeginLine();
          break;
        case LESSTHANOREQUALTO:
          compOp = jj_consume_token(LESSTHANOREQUALTO);
            lineNum = JavaCharStream.getBeginLine();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = BinaryPlusMinus();
            if (compOp.toString() == ">") {
              e1 = new BinaryCompGtExpr(lineNum, e1, e2);
            }else if (compOp.toString() == "<") {
              e1 = new BinaryCompLtExpr(lineNum, e1, e2);
            }else if (compOp.toString() == ">=") {
              e1 = new BinaryCompGeqExpr(lineNum, e1, e2);
            }else if (compOp.toString() == "<=") {
              e1 = new BinaryCompLeqExpr(lineNum, e1, e2);
            }
        break;
      case INSTANCEOF:
        typeStr = InstanceofExpr();
          {if (true) return new InstanceofExpr(lineNum, e1, typeStr);}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public String InstanceofExpr() throws ParseException {
  Token type;
  String br = "";
    jj_consume_token(INSTANCEOF);
    type = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
                                                             br = "[]";
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
      {if (true) return type.image.toString() + br;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr BinaryPlusMinus() throws ParseException {
  Expr e1 = null;
  Expr e2 = null;
  Token op = null;
  int lineNum = JavaCharStream.getBeginLine();
    e1 = BinaryMultModDiv();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case PLUS:
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = BinaryMultModDiv();
         if(op.toString() == "+") {
           e1 =  new BinaryArithPlusExpr(lineNum, e1, e2);
         }
         else if(op.toString() == "-") {
           e1 = new BinaryArithMinusExpr(lineNum, e1, e2);
         }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_9;
        }
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr BinaryMultModDiv() throws ParseException {
  Expr e1 = null;
  Expr e2 = null;
  Token op = null;
  int lineNum = JavaCharStream.getBeginLine();
    e1 = Cast();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIVIDE:
    case MOD:
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          op = jj_consume_token(MULT);
          break;
        case MOD:
          op = jj_consume_token(MOD);
          break;
        case DIVIDE:
          op = jj_consume_token(DIVIDE);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = Cast();
          if(op.toString() == "*") {
            e1 = new BinaryArithTimesExpr(lineNum, e1, e2);
          }
          else if(op.toString() == "%") {
            e1 = new BinaryArithModulusExpr(lineNum, e1, e2);
          }
          else if(op.toString() == "/") {
            e1 = new BinaryArithDivideExpr(lineNum, e1, e2);
          }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
        case DIVIDE:
        case MOD:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_10;
        }
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
        {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Cast() throws ParseException {
  Expr u;
  String typeStr;
  int lineNum = JavaCharStream.getBeginLine();
    if (jj_2_2(4)) {
      typeStr = CastExpr();
      u = Unary();
        {if (true) return new CastExpr(lineNum, typeStr, u);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case INCREMENT:
      case DECREMENT:
      case NOT:
      case LEFTPAREN:
      case MINUS:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:
        u = Unary();
        {if (true) return u;}
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String CastExpr() throws ParseException {
  Token type;
  String lb = "";
    jj_consume_token(LEFTPAREN);
    type = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      jj_consume_token(RIGHTBRACKET);
                                     lb = "[]";
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTPAREN);
        {if (true) return type.image.toString() + lb;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Unary() throws ParseException {
  int lineNum = JavaCharStream.getBeginLine(); Expr e1 = null; Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case DECREMENT:
        t = jj_consume_token(DECREMENT);
        break;
      case NOT:
        t = jj_consume_token(NOT);
        break;
      case INCREMENT:
        t = jj_consume_token(INCREMENT);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e1 = Unary();
      break;
    case NEW:
    case LEFTPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      e1 = Dispatch();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      if (t == null) {
        {if (true) return e1;}
      }
      else if (t.toString() == "-") {
        {if (true) return new UnaryNegExpr(lineNum, e1);}
      }
      else if (t.toString() == "--") {
        {if (true) return new UnaryDecrExpr(lineNum, e1, false);}
      }
      else if (t.toString() == "!") {
        {if (true) return new UnaryNotExpr(lineNum, e1);}
      }
      else if (t.toString() == "++") {
        {if (true) return new UnaryIncrExpr(lineNum, e1, false);}
      }
    throw new Error("Missing return statement in function");
  }

  static final public Expr Dispatch() throws ParseException {
  Expr e1 = null; Expr e2 = null; Expr d2;
  Token ref = null; Token mName = null; String name = null;
  int lineNum = JavaCharStream.getBeginLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case LEFTPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
      e1 = NewLevel();
      break;
    case ID:
      ref = jj_consume_token(ID);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
    case LEFTPAREN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        e1 = DispatchExpr(e1, ref);
        break;
      case LEFTBRACKET:
        jj_consume_token(LEFTBRACKET);
        e2 = Expr();
        jj_consume_token(RIGHTBRACKET);
      if (ref != null) {
        name = ref.image.toString();
      }
      e1 = new ArrayExpr(lineNum, null, name, e2);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
      if (e1 == null) {
        e1 = new VarExpr(lineNum, null, ref.image.toString());
      }
    d2 = Dispatch2(e1);
    d2 = UnaryPostOp(d2);
                           {if (true) return d2;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr UnaryPostOp(Expr exp) throws ParseException {
  Token op = null; Expr e = null; Expr r = null;
  int lineNum = JavaCharStream.getBeginLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
    case DECREMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENT:
        op = jj_consume_token(INCREMENT);
        break;
      case DECREMENT:
        op = jj_consume_token(DECREMENT);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (op.toString() == "++") {
        e = new UnaryIncrExpr(lineNum, exp, true);
      }
      else {
        e = new UnaryDecrExpr(lineNum, exp, true);
      }
      r = UnaryPostOp(e);
                         {if (true) return r;}
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
                                         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Dispatch2(Expr leftExpr) throws ParseException {
  Expr r = null; Token name = null; Expr e; Expr e1 = null;
  int lineNum = JavaCharStream.getBeginLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      name = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        e = DispatchExpr(leftExpr, name);
        break;
      default:
        jj_la1[47] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTBRACKET:
          jj_consume_token(LEFTBRACKET);
          e1 = Expr();
          jj_consume_token(RIGHTBRACKET);
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
      if (e1 != null) {
        e = new ArrayExpr(lineNum, leftExpr, name.image.toString(), e1);
      }
      e = new VarExpr(lineNum, leftExpr, name.image.toString());
      }
      r = Dispatch2(e);
                       {if (true) return r;}
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
                                       {if (true) return leftExpr;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr DispatchExpr(Expr ref, Token mName) throws ParseException {
  Expr e = null; DispatchExpr d = null; VarExpr ve;
  int lineNum = JavaCharStream.getBeginLine();
  ExprList el = new ExprList(lineNum);
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
    case INCREMENT:
    case DECREMENT:
    case NOT:
    case LEFTPAREN:
    case MINUS:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:
      e = Expr();
      el.addElement(e);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        e = Expr();
                          el.addElement(e);
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTPAREN);
      if (ref == null) {
        ve = new VarExpr(lineNum, null, "this");
        {if (true) return new DispatchExpr(lineNum, ve,
                              mName.image.toString(), el);}
      }
      d = new DispatchExpr(lineNum, ref,
                              mName.image.toString(), el);
      {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public Expr NewLevel() throws ParseException {
  Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      e = NewExpr();
                    {if (true) return e;}
      break;
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      e = Expr();
      jj_consume_token(RIGHTPAREN);
                                            {if (true) return e;}
      break;
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
      e = ConstExpr();
                        {if (true) return e;}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expr NewExpr() throws ParseException {
  Token type; Expr e = null;
  int lineNum = JavaCharStream.getBeginLine();
    jj_consume_token(NEW);
    type = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      jj_consume_token(RIGHTPAREN);
      {if (true) return new NewExpr(lineNum, type.image.toString());}
      break;
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      e = Expr();
      lineNum = JavaCharStream.getBeginLine();
      jj_consume_token(RIGHTBRACKET);
      {if (true) return new NewArrayExpr(lineNum, type.toString(), e);}
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ConstExpr ConstExpr() throws ParseException {
  ConstExpr c = null; Token t;
  int lineNum = JavaCharStream.getBeginLine();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_CONST:
      t = jj_consume_token(INT_CONST);
                      {if (true) return new ConstIntExpr(lineNum,
                                            t.image.toString());}
      break;
    case BOOLEAN_CONST:
      t = jj_consume_token(BOOLEAN_CONST);
                            {if (true) return new ConstBooleanExpr(lineNum,
                                            t.image.toString());}
      break;
    case STRING_CONST:
      t = jj_consume_token(STRING_CONST);
      {if (true) return new ConstStringExpr(lineNum,
                                  t.image
                                  .toString()
                                  .substring(1, t.image.toString().length()-1)
                                  .replaceAll("\u005c\u005c\u005c\u005c\u005c"", "\u005c""));}
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_34() {
    Token xsp;
    if (jj_3R_40()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    if (jj_3R_59()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(STRING_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(BOOLEAN_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(INT_CONST)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    if (jj_3R_52()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(LEFTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    if (jj_3R_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    if (jj_scan_token(RIGHTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(LESSTHANOREQUALTO)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(GREATERTHANOREQUALTO)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[54];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x20,0x0,0x400000,0x34000000,0x0,0x0,0x850e069c,0x10000000,0x400000,0x0,0x850e069c,0x400000,0x100,0x840e0004,0x840e0004,0x840e0004,0x840e0004,0x850e069c,0x10000000,0x200000,0x200000,0x100000,0x100000,0x1800,0x1800,0x1800,0x1e000,0x1e040,0x1e040,0x400000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x840e0004,0x400000,0x800e0000,0x840e0004,0x4000004,0x4400000,0x4400000,0x60000,0x60000,0x400000,0x4000000,0x0,0x0,0x840e0004,0x4000004,0x4400000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x400,0x0,0x0,0x20,0x400,0x780,0x0,0x0,0x400,0x780,0x0,0x0,0x780,0x780,0x780,0x780,0x780,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0xe,0xe,0xe,0x780,0x0,0x0,0x780,0x780,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x20,0x780,0x380,0x0,0x380,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 54; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 54; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
