yoyoy ast.StmtList@7852e922
yoyoy ast.StmtList@4e25154f
yoyoy ast.StmtList@70dea4e
yoyoy ast.StmtList@5c647e05
yoyoy ast.StmtList@33909752
// Source file: ArrayTest2.btm
// Source line: 4
class Main extends Object {
    // Source line: 5
    TextIO io = 
(/*L5*/new TextIO());
    // Source line: 7
    void main() {
        // Source line: 8
        int[] array = (/*L8*/new int[(/*L8*/1000)]);
        // Source line: 9
        (/*L9*/(/*L9*/io).putString((/*L9*/"Building reverse sorted array...\n")));
        // Source line: 10
        (/*L10*/(/*L10*/this).buildArray((/*L10*/array)));
        // Source line: 11
        (/*L11*/(/*L11*/io).putString((/*L11*/"Unsorted array:\n")));
        // Source line: 12
        (/*L12*/(/*L12*/this).printArray((/*L12*/array)));
        // Source line: 13
        (/*L13*/(/*L13*/io).putString((/*L13*/"Sorting array...\n")));
        // Source line: 14
        (/*L14*/(/*L14*/this).sortArray((/*L14*/array)));
        // Source line: 15
        (/*L15*/(/*L15*/io).putString((/*L15*/"Sorted array:\n")));
        // Source line: 16
        (/*L16*/(/*L16*/this).printArray((/*L16*/array)));
        // Source line: 17
        return;
    }
    // Source line: 20
    void buildArray(/*line:20*/int[] array) {
        // Source line: 21
        int i = (/*L21*/0);
        // Source line: 22
        while ((/*L22*/(/*L22*/i) < (/*L22*/(/*L22*/array).length)))
            // Source line: 22
            {
                // Source line: 23
                (/*L23*/array[(/*L23*/i)] = (/*L23*/(/*L23*/(/*L23*/array).length) - (/*L23*/1)));
                // Source line: 24
                (/*L24*/i = (/*L24*/(/*L24*/i) + (/*L24*/1)));
            }
        // Source line: 26
        return;
    }
    // Source line: 29
    void sortArray(/*line:29*/int[] array) {
        // Source line: 30
        int i = (/*L30*/0);
        // Source line: 31
        while ((/*L31*/(/*L31*/i) < (/*L31*/(/*L31*/array).length)))
            // Source line: 31
            {
                // Source line: 32
                int j = (/*L32*/(/*L32*/i) + (/*L32*/1));
                // Source line: 33
                while ((/*L33*/(/*L33*/j) < (/*L33*/(/*L33*/array).length)))
                    // Source line: 33
                    {
                        // Source line: 34
                        if ((/*L34*/(/*L34*/array[(/*L34*/i)]) > (/*L34*/array[(/*L34*/j)])))
                            // Source line: 34
                            {
                                // Source line: 35
                                int tmp = (/*L35*/array[(/*L35*/i)]);
                                // Source line: 36
                                (/*L36*/array[(/*L36*/i)] = (/*L36*/array[(/*L36*/j)]));
                                // Source line: 37
                                (/*L37*/array[(/*L37*/j)] = (/*L37*/tmp));
                            }
                        else
java.lang.NullPointerException
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.IfStmt.accept(Unknown Source)
	at visitor.Visitor.visit(Unknown Source)
	at ast.StmtList.accept(Unknown Source)
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.BlockStmt.accept(Unknown Source)
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.WhileStmt.accept(Unknown Source)
	at visitor.Visitor.visit(Unknown Source)
	at ast.StmtList.accept(Unknown Source)
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.BlockStmt.accept(Unknown Source)
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.WhileStmt.accept(Unknown Source)
	at visitor.Visitor.visit(Unknown Source)
	at ast.StmtList.accept(Unknown Source)
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.Method.accept(Unknown Source)
	at visitor.Visitor.visit(Unknown Source)
	at ast.MemberList.accept(Unknown Source)
	at visitor.PrintVisitor.visit(Unknown Source)
	at ast.Class_.accept(Unknown Source)
	at visitor.Visitor.visit(Unknown Source)
	at ast.ClassList.accept(Unknown Source)
	at visitor.Visitor.visit(Unknown Source)
	at Main.main(Unknown Source)
Internal error within compiler: stopping compilation
