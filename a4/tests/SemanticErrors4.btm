class Main
{
     int[] m() {  return new int[5]; }
     boolean flag;
     void main()
     {
        int i = 1;
	boolean[] be = true;  // init expression has wrong type
	boolean[] b = new boolean[10]; 

	if (i++)  return;     // Boolean expr is not a Boolean
	if (--i)  return;     // Boolean expr is not a Boolean
	if (b)    return;     // Boolean expr is not a Boolean

	for(; b[0] ; b++) {}  // update expression increments an array var.
	for(; --i ; i++) {}   // predicate expression has wrong type

	break;                // break outside of a loop

	return b[0];          // incompatible return type
	return b;             // incompatible return type
	return i--;           // incompatible return type
	return ++i;           // incompatible return type
	return m();           // incompatible return type

	// casting errors
        String[] sa = new String[1];
        Object[] oa = new Object[1];
	sa = (String[]) (oa); // downcast is OK at compile time
	oa = (Object[]) (sa); // upcast is OK

	sa = (String) (oa);   // neither upcast nor downcast + assignment error
	oa = (Object) (sa);   // upcast is OK but assignment is not
	sa = (string[]) (oa); // undefined base type (is replaced by Object[])
	sa = (String[]) (b);  // cannot cast boolean[] to String[]
	sa = (Object[]) (b);  // cannot cast boolean[] to Object[] and "=" error

	if (sa instanceof String[]) return; // no problem here
	if (sa instanceof string[]) return; // unknown base type
	if (i instanceof String[])  return; // primitive type on LHS
	if (i instanceof int)       return; // both LHS and RHS have prim. types

	int[] ia = new integer[1];// unknown base type (is replaced by Object)
	int[] ia2 = new int[b]; // wrong type for size expression
	be.length = 3;          // array length cannot be modified	

	be = ia2;             // wrong array variable assignment
	be[0] = 25;           // wrong array value assignment

	i = b.i;              // no field called 'i' for array b
                              // assignment error
        flag++;               // not an integer expression
        --flag;               // not an integer expression

	c[0] = 4;             // undeclared array variable
        return;
     }// main method
}// Main class
